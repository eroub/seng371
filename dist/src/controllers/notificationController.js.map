{"version":3,"file":"notificationController.js","sourceRoot":"","sources":["../../../src/controllers/notificationController.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response, Router} from \"express\";\nimport Helpers = require(\"../helperFunctions\");\nimport { NotificationModel } from \"../models/notificationModel\";\nimport { ProductModel } from \"../models/productModel\";\nimport { BaseRoute } from \"../routes/router\";\n\nlet userNotifications: any;\nlet Shoes: any;\nlet id: number;\n\nexport class NotificationController extends BaseRoute {\n    /**\n     * Creates NotificationController routes.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method create\n     * @param router {Router} The router object.\n     * @return void\n     */\n\n    public static create(router: Router) {\n        router.get(\"/user/:id/notifications\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().notificationCentre(req, res, next);\n        });\n\n        router.get(\"/user/:id/add_notification/:id2\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().inputNotification(req, res, next);\n        });\n\n        router.get(\"/user/:id/edit_notification/:id2\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().editNotificationForm(req, res, next);\n        });\n\n        router.get(\"/user/:id/notifications/filter/fulfilled\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().filterFulfilled(req, res, next);\n        });\n\n        router.get(\"/user/:id/notifications/filter/unfulfilled\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().filterUnfulfilled(req, res, next);\n        });\n\n        router.post(\"/user/:id/add_notification/:id2\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().addNotification(req, res, next);\n        });\n\n        router.post(\"/user/:id/remove_notification/:id2\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().removeNotification(req, res, next);\n        });\n\n        router.post(\"/user/:id/edit_notification/:id2\", (req: Request, res: Response, next: NextFunction) => {\n            new NotificationController().editNotification(req, res, next);\n        });\n    }\n\n    /**\n     * Renders the notificationCentre view when user navigates to /user/<user_id>/notifications.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method notificationCentre\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async notificationCentre(req: Request, res: Response, next: NextFunction) {\n        const idString = \"id\";\n        const userId = parseInt(req.params[idString], 10);\n        if (await this.buildNotifications(userId)) {\n            this.render(req, res, \"notificationCentre\",\n                {id: userId, title: \"Notifications\", notifications: userNotifications});\n        } else {\n            res.status(404)\n            .send({\n                message: \"No user with associated ID. Check the entered number.\",\n                status: res.status,\n            });        }\n    }\n\n    /**\n     * Renders the notificationCentre view when user navigates to /user/<user_id>/notifications/filter/fulfilled.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method filterFulfilled\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n    public async filterFulfilled(req: Request, res: Response, next: NextFunction) {\n        const idString = \"id\";\n        const userId = parseInt(req.params[idString], 10);\n        const fulfilledNots: any = [];\n        if (await this.check_local(userId)) {\n            for (const item in userNotifications) {\n                if (userNotifications.hasOwnProperty(item)) {\n                    if (userNotifications[item].fulfilled) {\n                        fulfilledNots.push(userNotifications[item]);\n                    }\n                }\n            }\n            this.render(req, res, \"notificationCentre\",\n                {id: userId, title: \"Notifications\", notifications: fulfilledNots});\n        } else {\n            res.status(404)\n                .send({\n                    message: \"No user with associated ID. Check the entered number.\",\n                    status: res.status,\n                });        }\n    }\n\n    /**\n     * Renders the notificationCentre view when user navigates to /user/<user_id>/notifications/filter/unfulfilled.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method filterUnulfilled\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async filterUnfulfilled(req: Request, res: Response, next: NextFunction) {\n        const idString = \"id\";\n        const userId = parseInt(req.params[idString], 10);\n        const unfulfilledNots: any = [];\n        if (await this.check_local(userId)) {\n            for (const item in userNotifications) {\n                if (userNotifications.hasOwnProperty(item)) {\n                    if (!userNotifications[item].fulfilled) {\n                        unfulfilledNots.push(userNotifications[item]);\n                    }\n                }\n            }\n            this.render(req, res, \"notificationCentre\",\n                {id: userId, title: \"Notifications\", notifications: unfulfilledNots});\n        } else {\n            res.status(404)\n                .send({\n                    message: \"No user with associated ID. Check the entered number.\",\n                    status: res.status,\n                });        }\n    }\n\n    /**\n     * redirects to allShoes view when the user navigates to\n     * /user/<user_id>/notifications/add_notification/<notification_id>.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method addNotification\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async addNotification(req: Request, res: Response, next: NextFunction) {\n        const uString = \"id\";\n        const sString = \"id2\";\n        const userID = parseInt(req.params[uString], 10);\n        const shoeID = parseInt(req.params[sString], 10);\n        const nIF = new NotificationModel();\n        let threshold = req.body.threshold;\n        if (!threshold) {\n            threshold = 0;\n        }\n        await nIF.addNotification(userID, shoeID, threshold, req.body.type);\n        res.redirect(\"/user/\" + userID + \"/allShoes\");\n\n    }\n\n    /**\n     * redirects to notifications view when the user navigates to /user/<user_id>/remove_notification/<notification_id>.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method removeNotification\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n    public async removeNotification(req: Request, res: Response, next: NextFunction) {\n        const uString = \"id\";\n        const idString = \"id2\";\n        const userID = parseInt(req.params[uString], 10);\n        const notifID = req.params[idString];\n        const nIF = new NotificationModel();\n        await nIF.remove_notif(notifID);\n        res.redirect(\"/user/\" + userID + \"/notifications\");\n    }\n\n    /**\n     * redirects to notifications view when the user navigates to /user/<user_id>/edit_notification/<notification_id>.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method editNotifications\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async editNotification(req: Request, res: Response, next: NextFunction) {\n        const uString = \"id\";\n        const idString = \"id2\";\n        const userID = parseInt(req.params[uString], 10);\n        const notifID = req.params[idString];\n        const nIF = new NotificationModel();\n        if (!req.body.threshold) {\n            req.body.threshold = 0;\n        }\n        await nIF.edit_notif(notifID, req.body.threshold, req.body.type);\n        res.redirect(\"/user/\" + userID + \"/notifications\");\n    }\n\n    /**\n     * fetches the addNotification view when the user navigates to /user/<user_id>/add_notification/<notification_id>.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method inputNotifications\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async inputNotification(req: Request, res: Response, next: NextFunction) {\n        const userIdString = \"id\";\n        const userId = parseInt(req.params[userIdString], 10);\n        const shoeIdString = \"id2\";\n        const shoeId = parseInt(req.params[shoeIdString], 10);\n        const shoeIF = new ProductModel();\n        const shoe = await shoeIF.getOneShoe(shoeId);\n        if (shoe && await Helpers.isUser(userId)) {\n            this.render(req, res, \"addNotification\", { id: userId, shoe });\n            res.status(200)\n                .send({\n                    message: \"Success\",\n                    status: res.status,\n                });\n        } else {\n            res.status(404)\n                .send({\n                    message: \"No shoe found with the given id.\",\n                    status: res.status,\n                });\n        }\n\n    }\n\n    /**\n     * fetches the ditNotification view when the user navigates to /user/<user_id>/edit_notification/<notification_id>.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method editNotificationForm\n     * @param req {Request} The request object.\n     * @param res {Response} The response object.\n     * @param next {NextFunction} The NextFunction.\n     * @return void\n     */\n\n    public async editNotificationForm(req: Request, res: Response, next: NextFunction) {\n        const userIdString = \"id\";\n        const userId = parseInt(req.params[userIdString], 10);\n        const notIdString = \"id2\";\n        const notId = req.params[notIdString];\n        const notification = await this.getNotif(notId);\n        this.render(req, res, \"editNotification\", { id: userId, title: \"Notification\", notification });\n    }\n\n    /**\n     * A helper function to set the usrs notifications.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method buildNotifications\n     * @param UserID, the ID of the user for whom to return notifications for\n     * @return boolean\n     */\n\n    private async buildNotifications(userID: number) {\n        if (await Helpers.isUser(userID)) {\n            id = userID;\n            await this.setLocals(userID);\n            for (const item in userNotifications) {\n                if (userNotifications.hasOwnProperty(item)) {\n                    const notification = userNotifications[item];\n                    const shoe = this.getShoe(notification.shoe_id);\n                    notification[\"shoename\"] = shoe.brand + \" \" + shoe.model + \" \" + shoe.colorway;\n                    notification[\"current_price\"] = shoe.current_price;\n                    notification[\"size\"] = shoe.size;\n                    await this.checkFulfilled(notification, shoe.current_price);\n                }\n            }\n            userNotifications.sort((a: any, b: any) => {\n                console.log(\"false!!!\",userID)\n\n                return a.shoename.toLowerCase().localeCompare(b.shoename.toLowerCase());\n\n            });\n\n            return true;\n        } else {\n\n            return false;\n        }\n    }\n\n    /**\n     * A helper function that checks if a notification has been fulfilled\n     * @class NotificationController extends BaseRoute\n     * @method editNotificationForm\n     * @param notification\n     * @param currentPrice\n     * @return void\n     */\n\n    private async checkFulfilled(notification: any, currentPrice: any) {\n        if (!notification.fulfilled) {\n            if ((notification.type === \"Below\") && (notification.threshold > currentPrice)) {\n                await this.fulfill(notification._id);\n                notification.fulfilled = true;\n            }\n            if ((notification.type === \"Above\") && (notification.threshold < currentPrice)) {\n                await this.fulfill(notification._id);\n                notification.fulfilled = true;\n            }\n        }\n    }\n\n    /**\n     * Queries the db to update status of a notification.\n     *\n     * @class NotificationController extends BaseRoute\n     * @method fulfill\n     * @param Notification  the notification Object.\n     * @return true if the notification was successfully fulfilled, otherwise false.\n     */\n\n    private async fulfill(notification: any) {\n        const nIF = new NotificationModel();\n        await nIF.fulfill(notification._id);\n    }\n\n    /**\n     * calls buildNotifications is userNotifications is empty or if id != userID\n     *\n     * @class NotificationController extends BaseRoute\n     * @method check_local\n     * @param UserID  the id of the current user.\n     * @return true if buildnotifications returns succesfully\n     */\n\n    private async check_local(userID: number) {\n        if (!userNotifications) {\n            return await this.buildNotifications(userID);\n        } else if (id !== userID) {\n            return await this.buildNotifications(userID);\n        }\n        return true;\n    }\n\n    /**\n     * calls local function setUserNotifications to set local variable userNotification\n     *\n     * @class NotificationController extends BaseRoute\n     * @method setLocals\n     * @param UserID  the id of the current user.\n     * @return void\n     */\n\n    private async setLocals(userID: number) {\n        await this.setUserNotifications(userID);\n        Shoes = await Helpers.getAllDbShoes();\n\n    }\n\n    /**\n     * Queries the DB to set local variable userNotification\n     *\n     * @class NotificationController extends BaseRoute\n     * @method setUserNotifications\n     * @param UserID  the id of the current user.\n     * @return void\n     */\n\n    private async setUserNotifications(userID: number) {\n        const notifIf = new NotificationModel();\n        userNotifications = await notifIf.getUserNotifications(userID);\n\n    }\n\n    /**\n     * returns a shoe object\n     *\n     * @class NotificationController extends BaseRoute\n     * @method getShoe\n     * @param UserID  the id of the current user.\n     * @return shoe object\n     */\n\n    private getShoe(shoeID: number) {\n        for (const item in Shoes) {\n            if (Shoes.hasOwnProperty(item)) {\n                const shoe = Shoes[item];\n                if (shoe.shoe_id === shoeID) {\n                    return shoe;\n                }\n            }\n        }\n    }\n\n    /**\n     * returns a shoe object\n     *\n     * @class NotificationController extends BaseRoute\n     * @method getShoe\n     * @param id (any)   the id of the notification.\n     * @return notification object\n     */\n\n    private async getNotif(id: any) {\n        const nIF = new NotificationModel();\n        const notif = await nIF.get_notif(id);\n        return notif[0];\n    }\n\n}\n"]}