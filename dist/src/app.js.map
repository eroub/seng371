{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAqC;AACrC,gEAAyC;AACzC,8DAAwC;AACxC,oDAA8B;AAC9B,kDAA4B;AAC5B,8CAAwB;AACxB,iEAAgE;AAChE,uEAAsE;AACtE,6EAA4E;AAC5E,+EAA8E;AAC9E,qEAAoE;AACpE,wCAA4C;AAE5C;;;;GAIG;AACH;IAgBI;;;;;OAKG;IACH;QACI,+BAA+B;QAC/B,IAAI,CAAC,GAAG,GAAG,iBAAO,EAAE,CAAC;QAErB,wBAAwB;QACxB,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,aAAa;QACb,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IA7BD;;;;;;;OAOG;IACW,gBAAS,GAAvB;QACI,OAAO,IAAI,MAAM,EAAE,CAAC;IACxB,CAAC;IAqBM,mCAAkB,GAAzB;QACI,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACI,uBAAM,GAAb;QACI,mBAAmB;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE7D,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAEnC,eAAe;QACf,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAE5B,yBAAyB;QACzB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAEhC,4BAA4B;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,UAAU,CAAC;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC,CAAC;QAEJ,iCAAiC;QACjC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,uBAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAE/C,yCAAyC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAC,GAAQ,EAAE,GAAoB,EAAE,GAAqB,EAAE,IAA0B;YAC3F,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,iBAAiB;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAY,EAAE,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACK,uBAAM,GAAd;QACI,IAAI,MAAsB,CAAC;QAC3B,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;QAE1B,oCAAoC;QACpC,kBAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1B,+CAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtC,6CAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,uCAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAClC,iCAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,qCAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACjC,wBAAwB;QACxB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEzB,CAAC;IAEL,aAAC;AAAD,CAAC,AAlGD,IAkGC;AAEQ,wBAAM","sourcesContent":["import bodyParser from \"body-parser\";\nimport cookieParser from \"cookie-parser\";\nimport errorHandler from \"errorhandler\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport path from \"path\";\nimport { AdminController } from \"./controllers/adminController\";\nimport { CustomerController } from \"./controllers/customerController\";\nimport { LeaderboardController } from \"./controllers/leaderboardController\";\nimport { NotificationController } from \"./controllers/notificationController\";\nimport { ProductController } from \"./controllers/productController\";\nimport { IndexRoute } from \"./routes/index\";\n\n/**\n * The server.\n *\n * @class Server\n */\nexport default class Server {\n\n    /**\n     * Bootstrap the application.\n     *\n     * @class Server\n     * @method bootstrap\n     * @static\n     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.\n     */\n    public static bootstrap(): Server {\n        return new Server();\n    }\n\n    public app: express.Application;\n\n    /**\n     * Constructor.\n     *\n     * @class Server\n     * @constructor\n     */\n    constructor() {\n        // create expressjs application\n        this.app = express();\n\n        // configure application\n        this.config();\n\n        // add routes\n        this.routes();\n    }\n\n    public getExpressInstance(): express.Application {\n        return this.app;\n    }\n\n    /**\n     * Configure application\n     *\n     * @class Server\n     * @method config\n     */\n    public config() {\n        // add static paths\n        this.app.use(express.static(path.join(__dirname, \"public\")));\n\n        // configure pug\n        this.app.set(\"views\", path.join(__dirname, \"../views\"));\n        this.app.set(\"view engine\", \"pug\");\n\n        // mount logger\n        this.app.use(logger(\"dev\"));\n\n        // mount json form parser\n        this.app.use(bodyParser.json());\n\n        // mount query string parser\n        this.app.use(bodyParser.urlencoded({\n            extended: true,\n        }));\n\n        // mount cookie parser middleware\n        this.app.use(cookieParser(\"SECRET_GOES_HERE\"));\n\n        // catch 404 and forward to error handler\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n            err.status = 404;\n            next(err);\n        });\n\n        // error handling\n        this.app.use(errorHandler());\n    }\n\n    /**\n     * Create and return Router.\n     *\n     * @class Server\n     * @method routes\n     * @return void\n     */\n    private routes() {\n        let router: express.Router;\n        router = express.Router();\n\n        // Create routes for all controllers\n        IndexRoute.create(router);\n        NotificationController.create(router);\n        LeaderboardController.create(router);\n        CustomerController.create(router);\n        AdminController.create(router);\n        ProductController.create(router);\n        // use router middleware\n        this.app.use(router);\n\n    }\n\n}\n\nexport { Server };\n"]}