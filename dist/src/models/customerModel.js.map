{"version":3,"file":"customerModel.js","sourceRoot":"","sources":["../../../src/models/customerModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mongodb = require(\"mongodb\");\nimport DbClient = require(\"../DbClient\");\n\nconst datab = DbClient.connect();\nconst ObjectID: any = mongodb.ObjectID;\n\nexport class CustomerModel {\n\n    constructor() {}\n\n    /**\n     * Get user info for a specific user specified by user_id.\n     *\n     * @class CustomerModel\n     * @method userInfo\n     * @param userId {Number} The user_id of the user.\n     * @return An array containing a JSON object with the users info\n     * ({isAdmin, user_id, username}) if the id is valid.\n     */\n    public userInfo(userId: number) {\n        const users = datab\n            .then((db) => {\n                return db!.collection(\"users\").find({user_id: userId}).toArray();\n            })\n            .then((sneakers: any) => {\n                return sneakers;\n            })\n            .catch((err) => {\n                console.log(\"Grabbing user info from the database has failed\");\n            });\n\n        return users;\n    }\n\n    /**\n     * Adds a shoe to a users portfolio.\n     *\n     * @class CustomerModel\n     * @method add_shoe\n     * @param userId {Any} The user_id of the user.\n     * @param shoeID {Number} The id of the shoe being added.\n     * @param purchase {Number} The purchase price that the user bought the shoe for.\n     * @return true if the shoe was added successfully, otherwise false.\n     */\n    public add_shoe(userId: any, shoeID: number, purchase: number) {\n        const shoeAdd = datab\n            .then((db) => {\n                db!.collection(\"user_shoes\").insertOne({user_id: userId, shoe_id: shoeID, purchase_price: purchase});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Adding a shoe to the database has failed\");\n                return false;\n            });\n        return shoeAdd;\n    }\n\n    /**\n     * Edits the purchase price of a users shoe.\n     *\n     * @class CustomerModel\n     * @method edit_shoe\n     * @param id {Any} The Object id of the user's shoe in the database.\n     * @param purchasePrice {Number} The new purchase price.\n     * @return true if the shoe was edited successfully, otherwise false.\n     */\n    public edit_shoe(id: any, purchasePrice: number) {\n        const result = datab\n            .then((db) => {\n                db!.collection(\"user_shoes\").updateOne({_id: ObjectID(id)},\n                    {$set: {purchase_price: purchasePrice}});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Editing a shoe in the database has failed\");\n                return false;\n            });\n        return result;\n    }\n\n    /**\n     * Removes a shoe from a user's portfolio.\n     *\n     * @class CustomerModel\n     * @method remove_shoe\n     * @param id {Any} The Object id of the user's shoe in the database.\n     * @return true if the shoe was removed successfully, otherwise false.\n     */\n    public remove_shoe(id: any) {\n        const shoeRemove = datab\n            .then((db) => {\n                db!.collection(\"user_shoes\").deleteOne({_id: ObjectID(id)});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Removing a shoe from the database has failed\");\n                return false;\n            });\n        return shoeRemove;\n    }\n\n    /**\n     * Checks the database to see if a specific user_id corresponds to an actual user in the database.\n     *\n     * @class CustomerModel\n     * @method isUser\n     * @param userID {Any} The user_id to be checked.\n     * @return true if the user_id exists, otherwise false\n     */\n    public isUser(userID: any) {\n        const result = datab\n            .then((db) => {\n                return db!.collection(\"users\").find({user_id: userID}).toArray();\n            })\n            .then((value: any) => {\n                if (value.length === 0) {\n                    return false;\n                } else {\n                    return true;\n                }\n            })\n            .catch((err) => {\n                console.log(\"Confirmation of user has failed\");\n            });\n        return result;\n    }\n\n    /**\n     * Gets all of the shoe keys (numbers referencing shoes in the database) for a specific user.\n     *\n     * @class CustomerModel\n     * @method getKeys\n     * @param userID {Any} The user_id to get keys for.\n     * @return An array of user key JSON objects\n     * ({user_id, shoe_id, purchase_price}) if the user has shoes. Otherwise an empty array.\n     */\n    public getKeys(userID: any) {\n        const userKeys = datab\n            .then((db) => {\n                return db!.collection(\"user_shoes\").find({user_id: userID}).toArray();\n            })\n            .then((sneakers: any) => {\n                return sneakers;\n            })\n            .catch((err) => {\n                console.log(\"Getting user keys has failed\");\n            });\n        return userKeys;\n    }\n\n    /**\n     * Gets info for all users.\n     *\n     * @class CustomerModel\n     * @method get_users\n     * @return An array of user JSON objects ({isAdmin, user_id, username}).\n     */\n    public get_users() {\n        const users = datab\n            .then((db) => {\n                return db!.collection(\"users\").find().toArray();\n            })\n            .then((sneakers: any) => {\n                return sneakers;\n            })\n            .catch((err) => {\n                console.log(\"Getting user array has failed\");\n            });\n        return users;\n    }\n\n    /**\n     * Gets keys for all users.\n     *\n     * @class CustomerModel\n     * @method get_all_keys\n     * @return An array of user key JSON objects ({user_id, shoe_id, purchase_price}).\n     */\n    public get_all_keys() {\n        const userKeys = datab\n            .then((db) => {\n                return db!.collection(\"user_shoes\").find().toArray();\n            })\n            .then((sneakers: any) => {\n                return sneakers;\n            })\n            .catch((err) => {\n                console.log(\"Getting key array has failed\");\n            });\n        return userKeys;\n    }\n\n    /**\n     * Edits a specific user's username.\n     *\n     * @class CustomerModel\n     * @method edit_userName\n     * @param id {Any} the user_id of the user being edited.\n     * @param editedName {Any} the new username.\n     * @return true if the username was edited successfully, otherwise false.\n     */\n    public edit_userName(id: any, editedName: any) {\n        const result = datab\n            .then((db) => {\n                db!.collection(\"users\").updateOne({user_id: id},\n                    {$set: {username: editedName}});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Editing the user name has failed\");\n                return false;\n            });\n        return result;\n    }\n\n    /**\n     * Adds a (regular) user to the database.\n     *\n     * @class CustomerModel\n     * @method add_user\n     * @param userId {Number} the user_id of the user being added.\n     * @param username {Any} the username of the new user.\n     * @return true if the user was added successfully, otherwise false.\n     */\n    public add_user(userId: number, username: any) {\n        const addUser = datab\n            .then((db) => {\n                db!.collection(\"users\").insertOne({ isAdmin: false, user_id: userId, username});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Adding the user has failed\");\n                return false;\n            });\n        return addUser;\n    }\n\n    /**\n     * Removes a user from the database.\n     *\n     * @class CustomerModel\n     * @method remove_user\n     * @param userId {Any} the user_id of the user being removed.\n     * @return true if the user was removed successfully, otherwise false.\n     */\n    public remove_user(userId: any) {\n        const removeUser = datab\n            .then((db) => {\n                db!.collection(\"users\").deleteOne({ user_id: userId});\n                db!.collection(\"user_shoes\").deleteMany({ user_id: userId});\n                db!.collection(\"notifications\").deleteMany({ user_id: userId});\n                return true;\n            })\n            .catch((err) => {\n                console.log(\"Removing the user has failed\");\n                return false;\n            });\n        return removeUser;\n    }\n\n}\n"]}