{"version":3,"file":"notificationModel.js","sourceRoot":"","sources":["../../../src/models/notificationModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mongodb = require(\"mongodb\");\r\nimport DbClient = require(\"../DbClient\");\r\n\r\nconst ObjectID: any = mongodb.ObjectID;\r\n\r\nexport class NotificationModel {\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * Gets notifications for a specific user.\r\n     *\r\n     * @class NotificationModel\r\n     * @method getUserNotifications\r\n     * @param userId {Any} the user_id of the user to get notifications for.\r\n     * @return An array of notification JSON objects\r\n     * ({fulfilled, shoe_id, threshold, type, user_id} if the user has notifications.\r\n     */\r\n    public getUserNotifications(userId: any) {\r\n        const notifications = DbClient.connect()\r\n            .then((db) => {\r\n                return db!.collection(\"notifications\").find({user_id: userId}).toArray();\r\n            })\r\n            .then((notif: any) => {\r\n\r\n                return notif;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Getting user notifications has failed\");\r\n            });\r\n        return notifications;\r\n    }\r\n\r\n    /**\r\n     * Fulfills (sets fulfilled to true) a notification.\r\n     *\r\n     * @class NotificationModel\r\n     * @method fulfill\r\n     * @param Id {Any} the Object id of the notification.\r\n     * @return true if the notification was successfully fulfilled, otherwise false.\r\n     */\r\n    public fulfill(Id: any) {\r\n        const result = DbClient.connect()\r\n            .then((db) => {\r\n                db!.collection(\"notifications\").updateOne({_id: ObjectID(Id)}, {$set: {fulfilled: true}});\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Notification fulfillment has failed\");\r\n                return false;\r\n            });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds a notification for a specific shoe to a specific user.\r\n     *\r\n     * @class NotificationModel\r\n     * @method addNotification\r\n     * @param userId {Number} the user_id of the user.\r\n     * @param shoeId {Number} the shoe_id of the shoe.\r\n     * @param threshold {Any} the price threshold for the notification.\r\n     * @param type {Any} the type of notification (Above/Below).\r\n     * @return true if the notification was successfully added, otherwise false.\r\n     */\r\n    public addNotification(userId: number, shoeId: number, threshold: any, type: any) {\r\n        const nAdd = DbClient.connect()\r\n            .then((db) => {\r\n                db!.collection(\"notifications\").insertOne({fulfilled: false,\r\n                    shoe_id: shoeId, threshold, type , user_id: userId});\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Adding a notification has failed\");\r\n                return false;\r\n            });\r\n        return nAdd;\r\n    }\r\n\r\n    /**\r\n     * Removes a notification for a specific user.\r\n     *\r\n     * @class NotificationModel\r\n     * @method remove_notif\r\n     * @param id {Any} the Object id of the notification.\r\n     * @return true if the notification was successfully removed, otherwise false.\r\n     */\r\n    public remove_notif(id: any) {\r\n        const nRemove = DbClient.connect()\r\n            .then((db) => {\r\n                db!.collection(\"notifications\").deleteOne({_id: ObjectID(id)});\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Removing a notification has failed\");\r\n                return false;\r\n            });\r\n        return nRemove;\r\n    }\r\n\r\n    /**\r\n     * Gets a single notification.\r\n     *\r\n     * @class NotificationModel\r\n     * @method get_notif\r\n     * @param Id {Any} the Object id of the notification.\r\n     * @return An array containing one notification, if the notification exists.\r\n     */\r\n    public get_notif(id: any) {\r\n        const notification = DbClient.connect()\r\n            .then((db) => {\r\n                return db!.collection(\"notifications\").find({_id: ObjectID(id)}).toArray();\r\n            })\r\n            .then((notif: any) => {\r\n                return notif;\r\n                // res.send(sneakers);\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Getting a notification has failed\");\r\n            });\r\n        return notification;\r\n    }\r\n\r\n    /**\r\n     * Edits a notification for a specific user.\r\n     *\r\n     * @class NotificationModel\r\n     * @method edit_notif\r\n     * @param id {Any} the Object id of the notification.\r\n     * @param threshold {Any} the new threshold for the notification.\r\n     * @param type {Any} the new type for the notification.\r\n     * @return true if the notification was successfully edited, otherwise false.\r\n     */\r\n    public edit_notif(id: any, threshold: any, type: any) {\r\n        const result = DbClient.connect()\r\n            .then((db) => {\r\n                db!.collection(\"notifications\").updateOne({_id: ObjectID(id)},\r\n                    {$set: {threshold, type, fulfilled: false}});\r\n                return true;\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Editing a notification has failed\");\r\n                return false;\r\n            });\r\n        return result;\r\n    }\r\n}\r\n"]}